{"version":3,"file":"static/js/785.cdd65a08.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/FillterContacts/FillterContacts.styled.jsx","components/FillterContacts/FillterContacts.jsx","components/ContactsList/ContactsList.styled.jsx","Redux/contactsSlice/selectors.js","components/ContactsCatalogue/ContactsCatalogue.styled.jsx","components/ContactsCatalogue/ContactsCatalogue.jsx","components/Filter.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/EditContactForm/EditContactForm.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { GrClose } from 'react-icons/gr';\n\nexport const ContactsformBackdrop = styled.div`\nposition: fixed;\n    inset: 0%;\n    background-color: rgba(44, 39, 50, 0.68);\n    z-index: 1;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const MainForm = styled(Form)`\nposition: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffffff;\n    width: 330px;\n    padding: 30px 0;\n    @media screen and (min-width: 768px) {\n      width: 500px;\n    }\n`;\n\nexport const CloseBox = styled(GrClose)`\n  top: 10px;\n  right: 10px;\n  width: 22px;\n  height: 22px;\n\n  position: absolute;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    top: 20px;\n    right: 20px;\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  padding-top: 30px;\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 24px;\n    font-weight: 600;\n    width: 75%;\n`;\n\nexport const Input = styled(Field)`\nborder-radius: 12px;\nfont-size: 18px;\nborder: none;\nbackground: #f0eaea70;\npadding: 10px;\nbox-shadow: 1px 2px 10px #837f7f;\n`;\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #000;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\nbox-sizing: border-box;\ncolor: #0f1111;\ncursor: pointer;\ndisplay: inline-block;\nfont-family: 'Caveat',sans-serif;\nfont-size: 20px;\nline-height: 29px;\npadding: 0 10px 0 11px;\ntext-align: center;\ntext-decoration: none;\nuser-select: none;\npadding: 10px;\nfont-size: 28px;\ntransition: 500ms;\ntransition-duration: 500ms;\ntransition-property: all;\nborder: none;\nbox-shadow: 3px 5px 11px black;\n\n  &:hover {\n    color: white;\n    border: 1px solid #d5d9d9;\n    padding: 8px;\n    background-color: #474747;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n  }\n`;","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { addContact } from 'Redux/contactsSlice/operetions';\nimport {\n  MainForm,\n  Label,\n  Input,\n  Button,\n  ContactsformBackdrop,\n  CloseBox,\n  FormTitle,\n} from './Contacts.styled';\n\nfunction ContactForm({ closeModal }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    e.currentTarget.name === 'name'\n      ? setName(e.currentTarget.value)\n      : setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    const userObj = {\n      name: name,\n      number: number,\n    };\n    dispatch(addContact(userObj));\n    setName('');\n    setNumber('');\n    closeModal();\n  };\n\n  return (\n    <ContactsformBackdrop>\n      <Formik initialValues={(name, number)} onSubmit={handleSubmit}>\n        <MainForm autoComplete=\"off\">\n          <CloseBox onClick={() => closeModal()} />\n          <FormTitle>Add contact</FormTitle>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={onChange}\n              value={name}\n            />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              pattern=\"[\\d ()+]*\"\n              required\n              onChange={onChange}\n              value={number}\n            />\n          </Label>\n\n          <Button type=\"submit\">Add contact</Button>\n        </MainForm>\n      </Formik>\n    </ContactsformBackdrop>\n  );\n}\n\nContactForm.prototype = {\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n\n\n\n\n\n\n// import { useState } from 'react';\n// import { Formik } from 'formik';\n// import { useDispatch} from 'react-redux';\n// import { addContact } from 'Redux/operetions';\n// import { MainForm, Label, Input, Button } from './Contacts.styled';\n// import Notiflix from 'notiflix';\n// import axios from 'axios';\n\n// function ContactForm() {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const dispatch = useDispatch();\n\n//   const onChange = e => {\n//     e.currentTarget.name === 'name'\n//       ? setName(e.currentTarget.value)\n//       : setNumber(e.currentTarget.value);\n//   };\n\n//   const handleSubmit = async (values, { resetForm }) => {\n//     resetForm();\n//     const userObj = {\n//       name: name,\n//       phone: number,\n//     };\n\n//     const isDuplicate = await checkContactDuplicate(userObj);\n\n//     if (isDuplicate) {\n//       Notiflix.Notify.failure('This contact already exists.');\n//       return;\n//     }\n\n//     dispatch(addContact(userObj));\n//     setName('');\n//     setNumber('');\n//   };\n\n//   const checkContactDuplicate = async ({ name, phone }) => {\n//     try {\n//       const response = await axios.get(`/contacts?name=${name}&phone=${phone}`);\n//       const data = response.data;\n//       return data.length > 0;\n//     } catch (error) {\n//       console.error(error);\n//       return false;\n//     }\n//   };\n\n//   return (\n//     <Formik initialValues={{ name, number }} onSubmit={handleSubmit}>\n//       <MainForm autoComplete=\"off\">\n//         <Label>\n//           Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             onChange={onChange}\n//             value={name}\n//           />\n//         </Label>\n//         <Label>\n//           Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             onChange={onChange}\n//             value={number}\n//           />\n//         </Label>\n\n//         <Button type=\"submit\">Add contact</Button>\n//       </MainForm>\n//     </Formik>\n//   );\n// }\n\n// export default ContactForm;","import styled from '@emotion/styled';\n\nexport const SearchLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  padding-bottom: 15px;\n  width: 60%;\n`;\n\nexport const SearchTitle = styled.h2`\n  color: white;\n  font-size: 20px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 25px;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  background-color: #f5f5f53b;\n  width: 100%;\n  outline: none;\n  border: none;\n  border-bottom: 1px solid white;\n  font-size: 28px;\n  color: #ffffff;\n  border-radius: 10px;\n  transition: 500ms;\n  padding: 6px;\n  padding-left: 20px;\n  &:hover {\n    font-size: 32px;\n    box-shadow: 2px 3px 12px #b7b6b6;\n    transition: 500ms;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { SearchLabel, SearchInput, SearchTitle } from './FillterContacts.styled';\nimport { changeFilter } from 'Redux/filterSlice/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <SearchLabel>\n      <SearchTitle>Find contsct by name</SearchTitle>\n      <SearchInput\n        type=\"text\"\n        onChange={e => {\n          dispatch(changeFilter(e.target.value));\n        }}\n      ></SearchInput>\n    </SearchLabel>\n  );\n};\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const Ol = styled.ol`\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n  font-size: 20px;\n\n  width: 90%;\n\n  padding: 50px;\n`;","export const getContacts = state => state.contacts.items;\n\nexport const getLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #d5d9d9;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\nbox-sizing: border-box;\ncolor: #0f1111;\ncursor: pointer;\ndisplay: inline-block;\nfont-family: 'Caveat',sans-serif;\nfont-size: 20px;\nline-height: 20px;\npadding: 0 5px 0 5px;\nmargin-bottom: 2px;\ntext-align: center;\ntext-decoration: none;\ntransition-duration: 500ms;\npadding: 5px;\ntransition-property: all;\n\n  &:hover {\n    font-size: 24px;\n    padding: 8px;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n    color: white;\n    background-color: #474747;\n  }\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n\n  border-bottom: 1px solid #fff;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const NameContainer = styled.div`\n  display: flex;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const NamePrg = styled.p`\n  width: 300px;\n  height: 30px;\n  color: white;\n`;\n\nexport const NumberPrg = styled.p`\n  color: white;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getVisibleContacts } from '../Filter';\nimport { getContacts } from 'Redux/contactsSlice/selectors';\nimport { getFiltedContacts } from 'Redux/filterSlice/filterSlice';\nimport { deleteContact } from 'Redux/contactsSlice/operetions';\nimport {\n  Button,\n  Item,\n  NameContainer,\n  NamePrg,\n  NumberPrg,\n  ButtonContainer,\n} from './ContactsCatalogue.styled';\n\nconst ContactItem = ({ selectedContact, openEditModal }) => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFiltedContacts);\n\n  const handleEdit = (id, name, number) => {\n    selectedContact({ id, name, number });\n    openEditModal();\n  };\n\n  return getVisibleContacts(contacts, filter).map(({ id, name, number }) => {\n    return (\n      <Item key={id}>\n        <NameContainer>\n          <NamePrg>{name}</NamePrg>\n          <NumberPrg>{number}</NumberPrg>\n        </NameContainer>\n        <ButtonContainer>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              handleEdit(id, name, number);\n            }}\n          >\n            Edit\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n          >\n            Delete\n          </Button>\n        </ButtonContainer>\n      </Item>\n    );\n  });\n};\n\nContactItem.prototype = {\n  selectedContact: PropTypes.func.isRequired,\n  showEditModal: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;","export const getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts\n    .filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\n    .sort((a, b) => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n};","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { GrClose } from 'react-icons/gr';\n\nexport const ContactsformBackdrop = styled.div`\n  position: fixed;\n  inset: 0%;\n  background-color: rgba(44, 39, 50, 0.68);\n  z-index: 1;\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const MainForm = styled(Form)`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  gap: 20px;\n  padding: 10px;\n  border-radius: 10px;\n  width: 270px;\n  padding: 40px 0;\n\n  background-color: #fffffff2;\n\n  @media screen and (min-width: 768px) {\n    width: 500px;\n  }\n`;\n\nexport const CloseBox = styled(GrClose)`\n  top: 10px;\n  right: 10px;\n  width: 22px;\n  height: 22px;\n\n  position: absolute;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    top: 20px;\n    right: 20px;\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  padding-top: 30px;\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 24px;\n    font-weight: 600;\n    width: 75%;\n`;\n\nexport const Input = styled(Field)`\nborder-radius: 12px;\nfont-size: 18px;\nborder: none;\nbackground: #f0eaea70;\npadding: 10px;\nbox-shadow: 1px 2px 10px #837f7f;\n`;\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #000;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\nbox-sizing: border-box;\ncolor: #0f1111;\ncursor: pointer;\ndisplay: inline-block;\nfont-family: 'Caveat',sans-serif;\nfont-size: 20px;\nline-height: 29px;\npadding: 0 10px 0 11px;\ntext-align: center;\ntext-decoration: none;\nuser-select: none;\nwidth: 40%;\npadding: 10px;\nfont-size: 28px;\ntransition: 500ms;\ntransition-duration: 500ms;\ntransition-property: all;\nborder: none;\nbox-shadow: 3px 5px 11px black;\n\n  &:hover {\n    color: white;\n    border: 1px solid #d5d9d9;\n    padding: 8px;\n    background-color: #474747;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n  }\n`;","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editContact } from 'Redux/contactsSlice/operetions';\n\nimport {\n  MainForm,\n  Label,\n  Input,\n  Button,\n  ContactsformBackdrop,\n  CloseBox,\n  FormTitle,\n} from './EditContactForm.styled';\n\nexport const EditContactForm = ({ selectedContact, closeEditModal }) => {\n  const [id] = useState(selectedContact.id);\n  const [name, setName] = useState(selectedContact.name);\n  const [number, setNumber] = useState(selectedContact.number);\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    e.currentTarget.name === 'name'\n      ? setName(e.currentTarget.value)\n      : setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = () => {\n    const userObj = {\n      id: id,\n      name: name,\n      number: number,\n    };\n    dispatch(editContact(userObj));\n    closeEditModal();\n  };\n\n  return (\n    <ContactsformBackdrop>\n      <Formik initialValues={(name, number)} onSubmit={handleSubmit}>\n        <MainForm autoComplete=\"off\">\n          <CloseBox\n            onClick={() => {\n              closeEditModal();\n            }}\n          />\n          <FormTitle>Edit contact form</FormTitle>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={onChange}\n              value={name}\n            />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              onChange={onChange}\n              value={number}\n            />\n          </Label>\n\n          <Button type=\"submit\">Edit contact</Button>\n        </MainForm>\n      </Formik>\n    </ContactsformBackdrop>\n  );\n};\n\nEditContactForm.propTypes = {\n  selectedContact: PropTypes.object.isRequired,\n  closeEditModal: PropTypes.func.isRequired,\n};","import { useState } from 'react';\nimport { Ol } from './ContactsList.styled';\nimport ContactItem from 'components/ContactsCatalogue/ContactsCatalogue';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\n\nconst ContactsList = () => {\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  const openEditModal = () => {\n    setShowEditModal(() => true);\n  };\n\n  const closeEditModal = () => {\n    setShowEditModal(() => false);\n  };\n\n  return (\n    <>\n      <Ol>\n        <ContactItem\n          selectedContact={setSelectedContact}\n          openEditModal={openEditModal}\n        />\n      </Ol>\n      {showEditModal && (\n        <EditContactForm\n          selectedContact={selectedContact}\n          closeEditModal={closeEditModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;","import styled from '@emotion/styled';\n\nexport const ContactsPageContainer = styled.div`\n  width: 90%;\n  position: relative;\n`;\n\nexport const AddContactsButton = styled.button`\n  position: absolute;\n  top: 130px;\n  width: auto;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  border: 1px solid #d5d9d9;\n  border-radius: 8px;\n  box-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\n  box-sizing: border-box;\n  color: #0f1111;\n  cursor: pointer;\n  font-family: 'Caveat', sans-serif;\n  font-size: 20px;\n  line-height: 29px;\n  padding: 0 10px 0 11px;\n  text-align: center;\n  text-decoration: none;\n  user-select: none;\n  transition-duration: 500ms;\n  transition-property: all;\n  box-shadow: 8px 4px 20px black;\n  background-image: linear-gradient(167deg, #726969, #f3bdbd);\n\n  &:hover {\n    background-color: #6a7576;\n    box-shadow: 0 0 10px #c7d5d7, 0 0 2px #c7d7d7, 0 0 40px #1f2223;\n    color: white;\n    padding: 26px;\n  }\n  @media screen and (min-width: 768px) {\n    gap: 15px;\n    flex-direction: row;\n  }\n\n`;\n\nexport const ContactsPageBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding-top: 20px;\n\n  border-radius: 5px;\n  box-shadow: rgb(200 102 102) 1px 9px 20px 0px;\n  background-image: linear-gradient(0deg, #ff002d1c, #000000d6);\n}\n`;\n\nexport const LoadingBox = styled.div`\n  padding-top: 20px;\n  color: white;\n\n  font-size: 20px;\n  height: 30px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'Redux/contactsSlice/operetions';\nimport { useEffect, useState } from 'react';\nimport { HiOutlineUserAdd } from 'react-icons/hi';\n\nimport ContactForm from 'components/Contacts/Contacts';\nimport Filter from 'components/FillterContacts/FillterContacts';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { getLoading } from 'Redux/contactsSlice/selectors';\nimport {\n  ContactsPageBox,\n  LoadingBox,\n  ContactsPageContainer,\n  AddContactsButton,\n} from './Contacts.styled';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const showContactModal = () => {\n    setShowModal(() => true);\n  };\n\n  const closeContactsModal = () => {\n    setShowModal(() => false);\n  };\n\n  return (\n    <ContactsPageContainer>\n      <ContactsPageBox>\n        <AddContactsButton onClick={() => showContactModal()}>\n          <HiOutlineUserAdd />\n          Add contact\n        </AddContactsButton>\n        {showModal && <ContactForm closeModal={closeContactsModal} />}\n        <Filter />\n        <LoadingBox>{isLoading && 'Request in progress...'}</LoadingBox>\n        <ContactsList />\n      </ContactsPageBox>\n    </ContactsPageContainer>\n  );\n};\n\nexport default ContactsPage;"],"names":["ContactsformBackdrop","styled","MainForm","Form","CloseBox","GrClose","FormTitle","Label","Input","Field","Button","ContactForm","closeModal","useState","name","setName","number","setNumber","dispatch","useDispatch","onChange","e","currentTarget","value","initialValues","onSubmit","values","resetForm","userObj","addContact","autoComplete","onClick","type","title","required","pattern","prototype","PropTypes","SearchLabel","SearchTitle","SearchInput","changeFilter","target","Ol","getContacts","state","contacts","items","getLoading","isLoading","Item","NameContainer","ButtonContainer","NamePrg","NumberPrg","ContactItem","selectedContact","openEditModal","useSelector","filter","getFiltedContacts","normalizedFilter","toLowerCase","contact","includes","sort","a","b","nameA","toUpperCase","nameB","getVisibleContacts","map","id","handleEdit","deleteContact","showEditModal","EditContactForm","closeEditModal","editContact","setShowEditModal","setSelectedContact","ContactsPageContainer","AddContactsButton","ContactsPageBox","LoadingBox","showModal","setShowModal","useEffect","fetchContacts"],"sourceRoot":""}