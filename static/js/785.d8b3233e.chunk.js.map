{"version":3,"file":"static/js/785.d8b3233e.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/FillterContacts/FillterContacts.styled.jsx","components/FillterContacts/FillterContacts.jsx","components/ContactsList/ContactsList.styled.jsx","Redux/contactsSlice/selectors.js","components/ContactsCatalogue/ContactsCatalogue.styled.jsx","components/ContactsCatalogue/ContactsCatalogue.jsx","components/Filter.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/EditContactForm/EditContactForm.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { GrClose } from 'react-icons/gr';\n\nexport const ContactsformBackdrop = styled.div`\nposition: fixed;\n    inset: 0%;\n    background-color: rgba(44, 39, 50, 0.68);\n    z-index: 1;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const MainForm = styled(Form)`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffffff;\n    width: 330px;\n    padding: 30px 0;\n    background-image: linear-gradient(173deg, #c44242, #ffffff80);\n    box-shadow: inset 0em 1em 20px 1px #aeaca4;\n    @media screen and (min-width: 768px) {\n      width: 500px;\n    }\n`;\n\nexport const CloseBox = styled(GrClose)`\n  top: 10px;\n  right: 10px;\n  width: 22px;\n  height: 22px;\n\n  position: absolute;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    top: 20px;\n    right: 20px;\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  padding-top: 30px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    gap: 5px;\n    font-size: 24px;\n    font-weight: 600;\n    width: 75%;\n`;\n\nexport const Input = styled(Field)`\nborder-radius: 12px;\nfont-size: 18px;\nborder: none;\nbackground: #f0eaea70;\npadding: 10px;\nbox-shadow: 1px 2px 10px #837f7f;\n`;\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #000;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\ncolor: #0f1111;\ncursor: pointer;\nfont-size: 20px;\npadding: 0 10px 0 11px;\npadding: 10px;\nfont-size: 28px;\ntransition: 500ms;\ntransition-duration: 500ms;\ntransition-property: all;\nborder: none;\nbox-shadow: 3px 5px 11px black;\nwidth: 30%;\n\n  &:hover {\n    color: white;\n    border: 1px solid #d5d9d9;\n    padding: 8px;\n    background-color: #474747;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n  }\n`;","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\n\nimport { addContact } from 'Redux/contactsSlice/operetions';\n\nimport {\n  MainForm,\n  Label,\n  Input,\n  Button,\n  ContactsformBackdrop,\n  CloseBox,\n  FormTitle,\n} from './Contacts.styled';\n\nfunction ContactForm({ closeModal }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const onChange = e => {\n    e.currentTarget.name === 'name'\n      ? setName(e.currentTarget.value)\n      : setNumber(e.currentTarget.value);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (number.length < 10) {\n      toast.error('The phone number must contain at least 10 characters.', {\n        style: {\n          width: '400x',\n          height: '40px',\n          borderRadius: '10px',\n          fontSize: '20px',\n        },\n      });\n      return;\n    }\n\n    const isDuplicateContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase() || contact.number === number\n    );\n\n    if (isDuplicateContact) {\n      toast.error('This contact already exists.', {\n        style: {\n          width: '300px',\n          height: '40px',\n          borderRadius: '10px',\n          fontSize: '20px',\n        },\n      });\n      return;\n    }\n\n    resetForm();\n    const userObj = {\n      name: name,\n      number: number,\n    };\n    dispatch(addContact(userObj));\n    setName('');\n    setNumber('');\n    closeModal();\n  };\n  return (\n    <ContactsformBackdrop>\n      <Formik initialValues={{ name: '', number: '' }} onSubmit={handleSubmit}>\n        <MainForm autoComplete=\"off\">\n          <CloseBox onClick={() => closeModal()} />\n          <FormTitle>Add contact</FormTitle>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"The name can only contain letters, apostrophes, dashes, and spaces. For example, Adrian, Jacob Mercer, Charles de Bats de Castelmore d'Artagnan.\"\n              required\n              onChange={onChange}\n              value={name}\n            />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              title=\"The phone number must contain digits and start with a + sign.\"\n              pattern=\"^\\+[\\d ()]*$\"\n              required\n              onChange={onChange}\n              value={number}\n            />\n          </Label>\n          <Button type=\"submit\">Add</Button>\n        </MainForm>\n      </Formik>\n    </ContactsformBackdrop>\n  );\n}\n\nContactForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const SearchLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  padding-bottom: 15px;\n  width: 60%;\n`;\n\nexport const SearchTitle = styled.h2`\n  color: white;\n  font-size: 20px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 25px;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  background-color: #f5f5f53b;\n  width: 100%;\n  outline: none;\n  border: none;\n  border-bottom: 1px solid white;\n  font-size: 28px;\n  color: #ffffff;\n  border-radius: 10px;\n  transition: 500ms;\n  padding: 6px;\n  padding-left: 20px;\n  &:hover {\n    font-size: 32px;\n    box-shadow: 2px 3px 12px #b7b6b6;\n    transition: 500ms;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { SearchLabel, SearchInput, SearchTitle } from './FillterContacts.styled';\nimport { changeFilter } from 'Redux/filterSlice/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <SearchLabel>\n      <SearchTitle>Find contacts by name</SearchTitle>\n      <SearchInput\n        type=\"text\"\n        onChange={e => {\n          dispatch(changeFilter(e.target.value));\n        }}\n      ></SearchInput>\n    </SearchLabel>\n  );\n};\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const Ol = styled.ol`\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n  font-size: 20px;\n\n  width: 90%;\n\n  padding: 50px;\n`;","export const getContacts = state => state.contacts.items;\n\nexport const getLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #d5d9d9;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\nbox-sizing: border-box;\nfont-weight: 600;\ncolor: #150d0d8f;\ncursor: pointer;\ndisplay: inline-block;\nfont-size: 20px;\nline-height: 20px;\npadding: 0 5px 0 5px;\nmargin-bottom: 2px;\ntext-align: center;\ntext-decoration: none;\ntransition-duration: 500ms;\npadding: 5px 10px;\ntransition-property: all;\n\n&:last-child {\n  background-color: #ff0000b8;\n  color: #ffffffd6;\n  \n  &:hover {\n    background-color: #ff0000;\n  }\n}\n\n  &:hover {\n    font-size: 24px;\n    padding: 8px;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n    color: white;\n    background-color: #474747;\n  }\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  flex-direction: column;\n  border-bottom: 1px solid #fff;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const NameContainer = styled.div`\n  display: flex;\n  margin: 10px 0;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 10px;\n  margin: 10px 0;\n`;\n\nexport const NamePrg = styled.p`\n  width: 300px;\n  height: 30px;\n  color: white;\n`;\n\nexport const NumberPrg = styled.p`\n  color: white;\n`;\nexport const ContainerDelete = styled.div`\nwidth: 80%;\ntext-align: center;\ndisplay: flex;\nalign-items: center;\nposition: absolute;\ntop: 0;\nright: 50px;\n\nbackground-color: #9be9cf;\nborder-radius: 20px;\nbackground-image: linear-gradient(173deg, #c44242, #ffffff80);\n\n@media screen and (min-width: 768px) {\n  top: -50px;\n  right: 0px;\n  width: 30%;\n}\n`;\n\nexport const FormTitle = styled.form`\npadding: 15px;\n&>p{\n  color: white;\n  font-weight: 700;\n}\n`;\nexport const ButtonDelete = styled.button`\nwidth: 30%;\npadding: 5px;\nborder: none;\nborder-radius: 10px;\nfont-size: 18px;\nmargin-left: 10px;\nmargin-top: 15px;\nbackground-color: white;\nuser-select: none;\ntransition-duration: 500ms;\ntransition-property: all;\ncursor: pointer;\n&:hover {\n  font-size: 22px;\n  background-image: linear-gradient(0deg, #000000, #ffbbbb);\n  color: white;\n  box-shadow: 0px 3px 10px 0px black;\n}\n\n`;\n\n\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getVisibleContacts } from '../Filter';\nimport { getContacts } from 'Redux/contactsSlice/selectors';\nimport { getFiltedContacts } from 'Redux/filterSlice/filterSlice';\nimport { deleteContact } from 'Redux/contactsSlice/operetions';\nimport {\n  Button,\n  Item,\n  NameContainer,\n  NamePrg,\n  NumberPrg,\n  ButtonContainer,\n  FormTitle,\n  ButtonDelete,\n  ContainerDelete\n\n} from './ContactsCatalogue.styled';\n\nconst ContactItem = ({ selectedContact, openEditModal }) => {\n  const dispatch = useDispatch();\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [deleteId, setDeleteId] = useState(null);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFiltedContacts);\n\n  const handleEdit = (id, name, number) => {\n    selectedContact({ id, name, number });\n    openEditModal();\n  };\n\n  const handleDeleteConfirmation = (id) => {\n    setConfirmDelete(true);\n    setDeleteId(id);\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteContact(deleteId));\n    setConfirmDelete(false);\n    setDeleteId(null);\n  };\n\n  const handleCancelDelete = () => {\n    setConfirmDelete(false);\n    setDeleteId(null);\n  };\n\n  return getVisibleContacts(contacts, filter).map(({ id, name, number }) => {\n    return (\n      <Item key={id}>\n        <NameContainer>\n          <NamePrg>{name}</NamePrg>\n          <NumberPrg>{number}</NumberPrg>\n        </NameContainer>\n        <ButtonContainer>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              handleEdit(id, name, number);\n            }}\n          >\n            Edit\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              handleDeleteConfirmation(id);\n            }}\n          >\n            Delete\n          </Button>\n        </ButtonContainer>\n        {confirmDelete && id === deleteId && (\n          <ContainerDelete>\n          <FormTitle>\n          <p>Are you sure you want to delete this contact</p>\n          <ButtonDelete onClick={handleDelete}>Yes</ButtonDelete>\n          <ButtonDelete onClick={handleCancelDelete}>No</ButtonDelete>\n          </FormTitle>\n          </ContainerDelete>\n        )}\n      </Item>\n    );\n  });\n};\n\nContactItem.propTypes = {\n  selectedContact: PropTypes.func.isRequired,\n  openEditModal: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;","export const getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts\n    .filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\n    .sort((a, b) => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n};","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\nimport { GrClose } from 'react-icons/gr';\n\nexport const ContactsformBackdrop = styled.div`\n  position: fixed;\n  inset: 0%;\n  background-color: rgba(44, 39, 50, 0.68);\n  z-index: 1;\n  overflow: hidden;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const MainForm = styled(Form)`\nposition: relative;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ngap: 20px;\npadding: 10px;\nborder-radius: 10px;\nbackground-color: #ffffff;\nwidth: 330px;\npadding: 30px 0;\nbackground-image: linear-gradient(173deg, #c44242, #ffffff80);\nbox-shadow: inset 0em 1em 20px 1px #aeaca4;\n@media screen and (min-width: 768px) {\n  width: 500px;\n}\n`;\n\nexport const CloseBox = styled(GrClose)`\n  top: 10px;\n  right: 10px;\n  width: 22px;\n  height: 22px;\n\n  position: absolute;\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    top: 20px;\n    right: 20px;\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  padding-top: 30px;\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\njustify-content: space-between;\nflex-direction: column;\ngap: 5px;\nfont-size: 24px;\nfont-weight: 600;\nwidth: 75%;\n`;\n\nexport const Input = styled(Field)`\nborder-radius: 12px;\nfont-size: 18px;\nborder: none;\nbackground: #f0eaea70;\npadding: 10px;\nbox-shadow: 1px 2px 10px #837f7f;\n`;\n\nexport const Button = styled.button`\nbackground-color: #fff;\nborder: 1px solid #000;\nborder-radius: 8px;\nbox-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\ncursor: pointer;\nfont-size: 20px;\npadding: 0 10px 0 11px;\npadding: 10px;\nfont-size: 24px;\ntransition: 500ms;\ntransition-duration: 500ms;\ntransition-property: all;\nborder: none;\nbox-shadow: 3px 5px 11px black;\nwidth: 50%;\nfont-weight: bolder;\ncolor: #6d3e3e;\n\n  &:hover {\n    color: white;\n    border: 1px solid #d5d9d9;\n    padding: 8px;\n    background-color: #474747;\n    box-shadow: 0 0 10px #313131, 0 0 10px #ffffff, 0 0 15px #2d2f2f;\n  }\n`;","import { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editContact } from 'Redux/contactsSlice/operetions';\nimport { toast } from 'react-hot-toast';\n\nimport {\n  MainForm,\n  Label,\n  Input,\n  Button,\n  ContactsformBackdrop,\n  CloseBox,\n  FormTitle,\n} from './EditContactForm.styled';\n\nexport const EditContactForm = ({ selectedContact, closeEditModal }) => {\n  const [id] = useState(selectedContact.id);\n  const [name, setName] = useState(selectedContact.name);\n  const [number, setNumber] = useState(selectedContact.number);\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    e.currentTarget.name === 'name'\n      ? setName(e.currentTarget.value)\n      : setNumber(e.currentTarget.value);\n  };\n  const contacts = useSelector(state => state.contacts.items);\n  const handleSubmit = () => {\n\n    if (number.length < 10) {\n      toast.error('The phone number must contain at least 10 characters.', {\n        style: {\n          width: '400px',\n          height: '40px',\n          borderRadius: '10px',\n          fontSize: '20px',\n        },\n      });\n      return;\n    }\n\n    const isDuplicateContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase() || contact.number === number\n    );\n\n    if (isDuplicateContact) {\n      toast.error('This contact already exists.', {\n        style: {\n          width: '300px',\n          height: '40px',\n          borderRadius: '10px',\n          fontSize: '20px',\n        },\n      });\n      return;\n    }\n\n    const userObj = {\n      id: id,\n      name: name,\n      number: number,\n    };\n    dispatch(editContact(userObj));\n    closeEditModal();\n  };\n\n  return (\n    <ContactsformBackdrop>\n      <Formik initialValues={(name, number)} onSubmit={handleSubmit}>\n        <MainForm autoComplete=\"off\">\n          <CloseBox\n            onClick={() => {\n              closeEditModal();\n            }}\n          />\n          <FormTitle>Edit contact form</FormTitle>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"The name can only contain letters, apostrophes, dashes, and spaces. For example, Adrian, Jacob Mercer, Charles de Bats de Castelmore d'Artagnan.\"\n              required\n              onChange={onChange}\n              value={name}\n            />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              title=\"The phone number must contain digits and start with a + sign.\"\n              pattern=\"^\\+[\\d ()]*$\"\n              required\n              onChange={onChange}\n              value={number}\n            />\n          </Label>\n\n          <Button type=\"submit\">Edit contact</Button>\n        </MainForm>\n      </Formik>\n    </ContactsformBackdrop>\n  );\n};\n\nEditContactForm.propTypes = {\n  selectedContact: PropTypes.object.isRequired,\n  closeEditModal: PropTypes.func.isRequired,\n};","import { useState } from 'react';\nimport { Ol } from './ContactsList.styled';\nimport ContactItem from 'components/ContactsCatalogue/ContactsCatalogue';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\n\nconst ContactsList = () => {\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(null);\n\n  const openEditModal = () => {\n    setShowEditModal(() => true);\n  };\n\n  const closeEditModal = () => {\n    setShowEditModal(() => false);\n  };\n\n  return (\n    <>\n      <Ol>\n        <ContactItem\n          selectedContact={setSelectedContact}\n          openEditModal={openEditModal}\n        />\n      </Ol>\n      {showEditModal && (\n        <EditContactForm\n          selectedContact={selectedContact}\n          closeEditModal={closeEditModal}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;","import styled from '@emotion/styled';\n\nexport const ContactsPageContainer = styled.div`\n  width: 90%;\n  position: relative;\n`;\n\nexport const AddContactsButton = styled.button`\n  position: absolute;\n  top: 130px;\n  width: auto;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  border: 1px solid #d5d9d9;\n  border-radius: 8px;\n  box-shadow: rgba(213, 217, 217, 0.5) 0 2px 5px 0;\n  box-sizing: border-box;\n  cursor: pointer;\n  font-family: 'Caveat', sans-serif;\n  font-size: 20px;\n  line-height: 29px;\n  padding: 0 10px 0 11px;\n  text-align: center;\n  text-decoration: none;\n  user-select: none;\n  transition-duration: 500ms;\n  transition-property: all;\n  box-shadow: 8px 4px 20px black;\n  background-image: linear-gradient(167deg, #726969, #f3bdbd);\n  font-weight: bolder;\n  color: #691717;\n\n  &:hover {\n    background-color: #6a7576;\n    box-shadow: 0 0 10px #c7d5d7, 0 0 2px #c7d7d7, 0 0 40px #1f2223;\n    color: white;\n    padding: 26px;\n  }\n  @media screen and (min-width: 768px) {\n    gap: 15px;\n    flex-direction: row;\n  }\n\n`;\n\nexport const ContactsPageBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding-top: 20px;\n\n  border-radius: 5px;\n  box-shadow: rgb(200 102 102) 1px 9px 20px 0px;\n  background-image: linear-gradient(0deg, #ff002d1c, #000000d6);\n}\n`;\n\nexport const LoadingBox = styled.div`\n  padding-top: 20px;\n  color: white;\n\n  font-size: 20px;\n  height: 30px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'Redux/contactsSlice/operetions';\nimport { useEffect, useState } from 'react';\nimport { HiOutlineUserAdd } from 'react-icons/hi';\n\nimport ContactForm from 'components/Contacts/Contacts';\nimport Filter from 'components/FillterContacts/FillterContacts';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { getLoading } from 'Redux/contactsSlice/selectors';\nimport {\n  ContactsPageBox,\n  LoadingBox,\n  ContactsPageContainer,\n  AddContactsButton,\n} from './Contacts.styled';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => getLoading(state));\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const showContactModal = () => {\n    setShowModal(() => true);\n  };\n\n  const closeContactsModal = () => {\n    setShowModal(() => false);\n  };\n\n  return (\n    <ContactsPageContainer>\n      <ContactsPageBox>\n        <AddContactsButton onClick={() => showContactModal()}>\n          <HiOutlineUserAdd />\n          Add contact\n        </AddContactsButton>\n        {showModal && <ContactForm closeModal={closeContactsModal} />}\n        <Filter />\n        <LoadingBox>{isLoading && 'Request in progress...'}</LoadingBox>\n        <ContactsList />\n      </ContactsPageBox>\n    </ContactsPageContainer>\n  );\n};\n\nexport default ContactsPage;"],"names":["ContactsformBackdrop","styled","MainForm","Form","CloseBox","GrClose","FormTitle","Label","Input","Field","Button","closeModal","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","state","items","onChange","e","currentTarget","value","initialValues","onSubmit","values","resetForm","length","toast","style","width","height","borderRadius","fontSize","some","contact","toLowerCase","userObj","addContact","autoComplete","onClick","type","title","required","pattern","SearchLabel","SearchTitle","SearchInput","changeFilter","target","Ol","getContacts","Item","NameContainer","ButtonContainer","NamePrg","NumberPrg","ContainerDelete","ButtonDelete","selectedContact","openEditModal","confirmDelete","setConfirmDelete","deleteId","setDeleteId","filter","getFiltedContacts","handleDelete","deleteContact","handleCancelDelete","normalizedFilter","includes","sort","a","b","nameA","toUpperCase","nameB","getVisibleContacts","map","id","handleEdit","handleDeleteConfirmation","EditContactForm","closeEditModal","editContact","showEditModal","setShowEditModal","setSelectedContact","ContactsPageContainer","AddContactsButton","ContactsPageBox","LoadingBox","showModal","setShowModal","isLoading","getLoading","useEffect","fetchContacts"],"sourceRoot":""}